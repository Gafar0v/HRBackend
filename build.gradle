plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.1'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'com.bmuschko.docker-java-application' version '7.4.0'
    id 'com.bmuschko.docker-remote-api' version '7.4.0'
    id 'jacoco'
}


group = 'com.gafarov'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    testImplementation 'org.mockito:mockito-core:5.3.1'
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:1.5.5.Final"
    implementation 'org.liquibase:liquibase-core:4.23.1'
}

tasks.named('test') {
    useJUnitPlatform()
}
test {
    finalizedBy jacocoTestReport // report is always generated after tests run
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude : [
                    "com/gafarov/bastion/mapper/*",
                    "com/gafarov/bastion/model/*",
                    "com/gafarov/bastion/entity/*",
                    "com/gafarov/bastion/BastionApplication.class"
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    dependsOn test
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude : [
                    "com/gafarov/bastion/mapper/*",
                    "com/gafarov/bastion/model/*",
                    "com/gafarov/bastion/entity/*",
                    "com/gafarov/bastion/BastionApplication.class"
            ])
        }))
    }
    violationRules {
        rule {
            element = 'BUNDLE'
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.0
            }
        }
    }
}
